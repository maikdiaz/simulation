{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Números Aleatorios\n",
    "\n",
    "En la unidad anterior se describio como primer paso de los experimentos de simulación, la selección de una fuente de números aleatorios y la obtención de los mismos. Por lo tanto, disponer de un buen generador de números aleatorios es fundamental en Simulación. De hecho, constituye también una parte fundamental en otras áreas, como la Informática (algoritmos aleatorizados, verificación de algoritmos, complejidad de algoritmos, criptografía, ...), la Estadística (métodos de muestreo y remuestreo, contrastes Montecarlo, Inferencia Bayesiana, ...), y, en general, en cualquier problema de cálculo científico que, de manera directa o indirecta, incluya algún elemento probabilístico incluyendo los juegos de video."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## ¿Porqué estudiar generadores de números aleatorios?\n",
    "\n",
    "Actualmente existen multiples generadores de números aleatorios en diferentes entornos y compiladores lo cual supondría para un usuario de la Simulación que no es necesario su estudio. Sin embargo, estudios sobre algunos generadores comerciales sugieren que debemos actuar con cuidado con el uso de ellos. Incluso, el uso progresivo de modelos de simulación cada vez más detallados exige generadores de números aleatorios de mayor calidad."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##¿Cómo generar números aleatorios?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## ¿Cómo determinar si un generador de numeros aleatorios es apropiado?\n",
    "\n",
    "##Pruebas o contrastes empíricos\n",
    "\n",
    "Normalmente, pasaremos un conjunto de pruebas cuando introduzcamos un nuevo generador, o cuando deseamos analizar si un generador del que desconozcamos su algoritmo subyacente es suficientemente bueno para nuestros propósitos.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Constraste o prueba de Kolmogorov-Smirnov\n",
    "\n",
    "Consideramos el caso en que $F_0$ es continua. La función de distribución empírica de una muestra $X_1, X_2,...,X_n$ se define como:\n",
    "\n",
    "$$F_n(x)=\\frac{\\#\\{X_{i}\\leq x\\}}{n}$$\n",
    "\n",
    "Bajo la hipótesis nula $H_0:F_X(x)=F_0(x)$, esperamos que $F_n$ se aproxime a $F_0$. Definimos el estadístico bilateral de Kolmogorov-Smirnov\n",
    "\n",
    "$$D_{n}=\\underset{x\\in\\mathbb{R}}{\\sup}\\left|F_{n}(x)-F_{0}(x)\\right|$$\n",
    "\n",
    "La distribución exacta de $D_n$ está tabulada para valores seleccionados de $n\\leq40$ y del nivel de significación $\\alpha$. Para muestras grandes, se utiliza la distribución asintótica de $D_n$, que viene dada, para todo $z\\leq0$, por\n",
    "\n",
    "$$\\underset{n\\rightarrow\\infty}{\\lim}P(\\sqrt{n}D_{n}\\leq z)=L(z)=1-2\\overset{\\infty}{\\underset{i=1}{\\sum}}(-1)^{i-1}e^{-2i^{2}z^{2}}$$\n",
    "\n",
    "$L(z)$ está tabulada y se comprueba que la aproximación es suficientemente buena para $n\\geq35$. Intuitivamente, esperamos que $D_n$ sea pequeño cuando la hipótesis nula es cierta.\n",
    "En nuestro caso particula de aleatoriedad, si $X_{(1)}<X_{(2)}<...<X_{(n)}$ designa al estadístico de orden, $F_0(x_{(i)})=x_{(i)}$, y como $F_n(x_{(i)})=i/n$, resulta:\n",
    "\n",
    "$$D_{n}=\\underset{i\\leq i\\leq n}{\\max}\\left\\{ \\max\\left[\\left|\\frac{i}{n}-x_{(i)}\\right|,\\left|x_{(i)}-\\frac{i-1}{n}\\right|\\right]\\right\\}$$\n",
    "\n",
    "\n",
    "\n",
    "<img src=\"imgs/300px-KS_Example.png\" width=\"30%\" height=\"30%\" >\n",
    "<center>Figura. Ilustración del estadístico de Kolmogorov–Smirnov (K–S). La línea roja es una función de distribución acumulada (cumulative distribution function, CDF), la línea azul es una función empirica de distribución acumulada (empirical cumulative distribution function, ECDF), y la línea negra es el estadístico K–S. Imagen tomada de Wikipedia [https://en.wikipedia.org/wiki/Kolmogorov%E2%80%93Smirnov_test]</center>\n",
    "\n",
    "\n",
    "##Ejemplo"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "%matplotlib inline \n",
    "\n",
    "import numpy as np\n",
    "import scipy as sp\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "N = 100"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "image/png": [
       "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\n",
       "RK5CYII=\n"
      ],
      "text/plain": [
       "<matplotlib.figure.Figure at 0x106b99518>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Teoretical CDF for Uniform distribution F(x)\n",
    "u = [1.0] * N\n",
    "#print(u)\n",
    "\n",
    "# Gerate random numbers with Uniform distribution f(x)\n",
    "#np.random.seed(123456789)\n",
    "x = np.random.uniform(0,1,N)\n",
    "\n",
    "# Plot empirical distribution f(x)\n",
    "count, bins, ignored = plt.hist(x, 25, normed=True)\n",
    "plt.plot(bins, np.ones_like(bins), linewidth=2, color='r')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "De =  0.245056073633\n"
     ]
    },
    {
     "data": {
      "image/png": [
       "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\n"
      ],
      "text/plain": [
       "<matplotlib.figure.Figure at 0x1067afdd8>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "x1 = np.arange(1/N,1+1/N,1/N)\n",
    "y1 = np.cumsum(np.sort(u)/np.max(np.cumsum(u)))\n",
    "\n",
    "x2 = np.sort(x)\n",
    "y2 = np.cumsum(np.sort(x)/np.max(np.cumsum(x)))\n",
    "\n",
    "De=np.absolute(y2-y1)\n",
    "#print(D)\n",
    "print(\"De = \",np.max(De))\n",
    "\n",
    "# Plotting\n",
    "plt.plot(x1,y1,label='Uniform')\n",
    "plt.step(x2,y2,label='Random')\n",
    "x3 = [x1[De.argmax()],x1[De.argmax()]]\n",
    "y3 = [np.min([y1[De.argmax()],y2[De.argmax()]]),np.max([y1[De.argmax()],y2[De.argmax()]])]\n",
    "plt.step(x3,y3,label='D')\n",
    "\n",
    "#plt.plot(x1,De,label='De')\n",
    "\n",
    "plt.legend()\n",
    "plt.xlabel('X')\n",
    "plt.ylabel('Cumulative Probability P(X)')\n",
    "#plt.title('arbitrary')\n",
    "#plt.xscale('log')\n",
    "#plt.yscale('log')\n",
    "\n",
    "#plt.xlim(0, np.max([np.max(whitney),np.max(redwell)])+0.05)\n",
    "plt.ylim(0, 1.05)\n",
    "\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "D =  0.245056073633\n",
      "p-value =  8.96998346134e-06\n"
     ]
    }
   ],
   "source": [
    "# scipy function for K-S test\n",
    "from scipy import stats\n",
    "D,pvalue = stats.kstest(y2, 'uniform')\n",
    "print(\"D = \", D)\n",
    "print(\"p-value = \", pvalue)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Contraste o prueba  $\\chi^{2}$\n",
    "\n",
    "La prueba $\\chi^{2}$ es de bondad de ajuste. Es poco potente, por lo que permite justificar el rechazo de una hipótesis, pero proporciona escaso soporte a su aceptación. El problema de bondad de ajuste se plantea como sigue. Tenemos una muestra $X_1, X_2,...,X_n$ de una población con distribución $F_X(x)$ desconocida. Deseamos contrastar la hipótesis nula $H_0:F_X(x)=F_0(x)$, para todo $x\\in\\mathbb{R}$, donde $F_0(x)$ está completamente especificada, frente a la alternativa $H_1:F_X(x) \\neq F_0(x)$ para algún $x$.\n",
    "Para realizar el contraste, partimos el soporte de $X$ en $k$ subconjuntos o clases mutuamente excluyentes. Para cada subconjunto $i$, $i=1,...,k$, calculamos el número $f_i$ de observaciones que caen en la clase y el numero esperado de observaciones $e_i$ bajo la distribución hipotética $F_0$. El estadístico de la prueba es:\n",
    "\n",
    "$$\\chi^{2}=\\overset{k}{\\underset{i=1}{\\sum}}\\frac{(f_{i}-e_{i})^{2}}{e_{i}}$$\n",
    "\n",
    "cuya distribución asintótica es una $\\chi_{k-r-1}^{2}$, donde $r$ es el número de parámetros que se estiman a partir de las observaciones. La aproximación se considera aceptada si $\\min\\left\\{ e_{i}>5\\right\\}$. Intuitivamente, el estadístico tiende a ser pequeño bajo la hipótesis nula, y grande cuando ésta es falsa, con lo qu ese deduce inmediatamente un contraste de hipótesis. La potencia del contraste crece con el número $k$ de subconjuntos considerados.\n",
    "\n",
    "En nuestro problema de aleatoriedad, $F_0$ es la función de distribución de la uniforme en [0,1], con lo que $r=0$. Además, pueden cogerse $k$ subintervalos de [0,1] de igual longitud, con lo que $e_i=n/k$.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Constraste o prueba de rachas\n",
    "\n",
    "Dada la sucesión de observaciones $X_1, X_2,...,X_n$, construimos la sucesión de simbolos binarios definida mediante 1 si $X_i<X_{i+1}$, 0 si $X_i>X_{i+1}$. Definimos  racha creciente (decreciente) de longitud $l$ a un grupo seguido de $l$ números 1 (ó 0). Contabilizamos el número de rachas. Sabemos que su distribución asintótica, bajo la hipótesis nula de aleatoriedad, es:\n",
    "\n",
    "$$N\\left(\\frac{2n-1}{3},\\frac{16n-29}{90}\\right)$$\n",
    "\n",
    "Intuitivamente, rechazamos la aleatoriedad con un número muy pequeño o muy grande de rachas. De ahí se obtiene inmediatamente la prueba.\n",
    "\n",
    "###Contraste de rachas por encima y por debajo de la mediana\n",
    "\n",
    "Otro procedimiento para definir rachas se tiene del recuento de observaciones que se sitúan a un mismo lado de la mediana. La distribución asintótica del número de rachas, bajo la hipótesis de aleatoriedad, es:\n",
    "\n",
    "$$N\\left(1+\\frac{n}{2},\\frac{n}{2}\\right)$$\n",
    "\n",
    "de donde se sigue, inmediatamente una prueba."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "###Contraste o prueba de permutaciones\n",
    "\n",
    "Separamos las observaciones en $k$-uplas:\n",
    "\n",
    "$$(U_1,U_2,...,U_k),...,(U_{ik+1},U_{ik+2},...,U_{(i+1)k}),...$$\n",
    "\n",
    "La $k$-upla general se escribe:\n",
    "\n",
    "$$(U_{ik+j})_{j=1}^k$$\n",
    "\n",
    "La ordenamos crecientemente y consideramos la ordenación correspondiente de los subíndices $j$. Bajo la hipótesis de que la probabilidad de que dos números sean iguales es nula, hay $k!$ ordenaciones posibles. Bajo la hipótesis de independencia, todas las permutaciones son equiprobables, con probabilidad $1/k!$. Entonces es inmediato aplicar una prueba $\\chi^2$ con $k!$ clases, distribución asintótica $\\chi_{k!-1}^2$, frecuencias esperadas $r/k!$, onde $r$ es el número de $k$-uplas y frecuencias observadas el número de veces que aparece cada ordenación."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Contraste o prueba de huecos\n",
    "\n",
    "Fijamos dos valores $\\alpha$ y $\\beta$ con $0<\\alpha<\\beta<1$. La sucesión presenta un hueco de longitud $m$ si $U_j, U_{j+m}\\in\\left[\\alpha,\\beta\\right]$ pero $U_{j+1},...,U_{j+m+1}\\notin\\left[\\alpha,\\beta\\right]$. Bajo la hipótesis de aleatoriedad de la serie, la longitud $m$ de los huecos sigue una distribución geométrica de parámetro $P(\\alpha\\leq X_{j}\\leq\\beta)=\\beta-\\alpha=\\rho$, es decir:\n",
    "\n",
    "$$P(hueco\\: longitud\\: m)=\\rho(1-\\rho)^{m-1}$$.\n",
    "\n",
    "La hipótesis de aleatoriedad implica independencia de las longitudes de los huecos y podemos aplicar una prueba $\\chi^2$ basado en las comparacioens de los números observados y esperados de huecos de longitud $m$."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "###Repetición de contrastes o pruebas\n",
    "\n",
    "Para aumentar su potencia, los contrastes anteriores pueden repetirse $N$ veces. La distribución empírica de los valores del estadístico pueden compararse con su distribución teórica mediante, por ejemplo, el contraste de Kolmogorov-Smirnov."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#T3: Taller 3. Ejercicios\n",
    "* Tomando como base éste Notebook, implementar los contrastes o pruebas de Kolmogorov-Smirnov, $\\chi^2$, rachas, permutaciones y huecos en la sección correspondiente para evaluar la calidad de cualquier secuencia de números obtenidas por un generador de números aleatorios $U(0,1)$ utilizando tanto el generador de numpy como el implementado por Ud previamente.\n",
    "* Evaluar la calidad de los siguientes generadores de números aleatorios usando las pruebas implementadas en el punto anterior:\n",
    "    * RANDU $x_{i+1}=65539 x_i \\mod 2^31$\n",
    "    * Sinclair ZX81 $x_{i+1}=75 x_i \\mod (2^{16}+1)$\n",
    "    * Numerical reciepes $x_{i+1}= 1664525 x_i + 1013904223 \\mod 2^{32}$\n",
    "    * Borland C/C++ $x_{i+1}= 22695477 x_i + 1 \\mod 2^{32}$\n",
    "* Elabore un reporte en $\\LaTeX$ con formato de artículo científico usando OverLeaf (URL: https://www.overleaf.com/) describiendo la teoría principal, la metodología usada, presentando los resultados (incluyendo graficas), realizando un análisis y discusión de los resultados, finalizando con las principales conclusiones."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#Referencias\n",
    "\n",
    "[Ríos, Ríos & Martín, 2000] David Ríos, Sixto Ríos, Jacinto Martín. Simulación, Métodos y aplicaciones. Editorial Alfaomega, 2000."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.4.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 0
}
